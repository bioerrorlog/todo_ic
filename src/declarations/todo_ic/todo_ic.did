type TaskStatus = 
 variant {
   backlog;
   deleted;
   done;
   inProgress;
   review;
 };
type TaskOrders = 
 record {
   backlog: vec TaskId;
   done: vec TaskId;
   inProgress: vec TaskId;
   review: vec TaskId;
 };
type TaskId = text;
type Task = 
 record {
   description: text;
   id: TaskId;
   status: TaskStatus;
   title: text;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: TaskId;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: Profile;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type ProfileTemplate = 
 record {
   about: text;
   name: text;
 };
type Profile = 
 record {
   about: text;
   name: text;
   "principal": principal;
 };
type Error = 
 variant {
   alreadyExists;
   notAuthorized;
   notFound;
 };
type CreateTaskTemplate = 
 record {
   description: text;
   title: text;
 };
service : {
  createProfile: (ProfileTemplate) -> (Result);
  createTask: (CreateTaskTemplate) -> (Result_2);
  getGlobalTaskOrders: () -> (TaskOrders) query;
  getMyProfile: () -> (Result_1) query;
  getMyTaskOrders: () -> (TaskOrders) query;
  initialize: () -> ();
  listAllTasks: () -> (vec Task) query;
  listProfiles: () -> (vec Profile) query;
  showCaller: () -> (text) query;
  updateProfile: (ProfileTemplate) -> (Result);
}
