type Trie = 
 variant {
   branch: Branch;
   "empty";
   leaf: Leaf;
 };
type TaskStatus = 
 variant {
   deleted;
   doing;
   done;
   todo;
 };
type TaskId__1 = text;
type TaskId = text;
type Task = 
 record {
   description: text;
   id: TaskId;
   status: TaskStatus;
   title: text;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: TaskId__1;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Profiles = 
 variant {
   branch: Branch;
   "empty";
   leaf: Leaf;
 };
type ProfileTemplate = 
 record {
   about: text;
   name: text;
 };
type Profile = 
 record {
   about: text;
   name: text;
   "principal": principal;
 };
type List = 
 opt record {
       record {
         Key;
         Profile;
       };
       List;
     };
type Leaf = 
 record {
   keyvals: AssocList;
   size: nat;
 };
type Key = 
 record {
   hash: Hash;
   key: principal;
 };
type Hash = nat32;
type Error = 
 variant {
   alreadyExists;
   notAuthorized;
   notFound;
 };
type Branch = 
 record {
   left: Trie;
   right: Trie;
   size: nat;
 };
type AssocList = 
 opt record {
       record {
         Key;
         Profile;
       };
       List;
     };
service : {
  createProfile: (ProfileTemplate) -> (Result);
  greet: (text) -> (text);
  listProfiles: () -> (Profiles);
  putTask: (Task) -> (Result_1);
  showCaller: () -> (principal);
  updateProfile: (ProfileTemplate) -> (Result);
}
